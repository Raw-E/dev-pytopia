"""
Python Code and Commenting Guidelines

These guidelines aim to ensure consistency, readability, and maintainability in Python code.

# Code Structure
- Organize imports logically: First standard library, third-party, then local
- Aim for a maximum line length of 88 characters, prioritizing readability
- Use 4 spaces for indentation
- Use whitespace to improve code readability and separate logical sections

# Docstrings and Comments
- Use detailed docstrings for modules, classes, and functions:
  - Explain purpose, parameters, return values, and usage
  - Include examples where appropriate
  - Mention any side effects or important considerations

- Prefer Google-style docstring format, adapting as needed for clarity

- Use comments generously throughout the code:
  - Explain the 'why' behind code decisions, not just the 'what'
  - Describe complex algorithms or business logic step-by-step
  - Clarify any non-intuitive behavior or edge cases
  - Comment on important variable assignments or transformations
  - Use block comments to explain the purpose of code sections

- Include inline comments to provide context:
  - Explain the reasoning behind specific lines of code
  - Clarify the purpose of variables or function calls
  - Highlight important calculations or data manipulations

- Use TODO comments to specify things that need to be done
- Use IDEA comments to provide relevent ideas for future development

# Naming and Style
- Choose descriptive and meaningful names for variables, functions, and classes
- Follow PEP 8 naming conventions when possible, prioritizing clarity and consistency

# Code Quality
- Strive for self-explanatory code, but don't shy away from adding clarifying comments
- Keep comments up-to-date when modifying code
  - Look for any inconsistencies in comments and update them
- Use comments to explain the rationale behind optimizations or workarounds

Remember, while clear code is crucial, comprehensive commenting helps future maintainers 
understand the code's purpose, logic, and any potential pitfalls. Try your best to generate code that is both efficient and understandable.
"""